FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Update package lists and install essential tools
RUN apt-get update && apt-get install -y \
    # Network tools
    nmap \
    netcat-openbsd \
    netcat-traditional \
    socat \
    curl \
    wget \
    telnet \
    dnsutils \
    iproute2 \
    iptables \
    tcpdump \
    wireshark-common \
    openssh-client \
    openssh-server \
    # Development tools
    git \
    vim \
    nano \
    tmux \
    screen \
    htop \
    tree \
    # Archive tools
    zip \
    unzip \
    tar \
    gzip \
    # System tools
    sudo \
    net-tools \
    iputils-ping \
    procps \
    psmisc \
    lsof \
    strace \
    # Programming languages and tools
    python3 \
    python3-pip \
    # Build tools
    build-essential \
    make \
    gcc \
    g++ \
    autoconf \
    automake \
    libtool \
    pkg-config \
    # Additional useful tools
    jq \
    less \
    man-db \
    bash-completion \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js LTS (v20) from NodeSource repository to fix CVE-2023-44487
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Install Go (supports both amd64 and arm64)
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then \
        GO_ARCH="amd64"; \
    elif [ "$ARCH" = "arm64" ]; then \
        GO_ARCH="arm64"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    curl -fsSL https://golang.org/dl/go1.21.4.linux-${GO_ARCH}.tar.gz -o go.tar.gz && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

# Security updates to address medium severity vulnerabilities
RUN apt-get update && apt-get upgrade -y \
    # Update critical packages with known vulnerabilities
    libgssapi-krb5-2 \
    libk5crypto3 \
    libkrb5-3 \
    libkrb5support0 \
    libgnutls30 \
    libtasn1-6 \
    libc-bin \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user
RUN useradd -m -s /bin/bash -u 1000 developer && \
    echo "developer:developer" | chpasswd && \
    adduser developer sudo && \
    echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Set up SSH (optional, for remote access)
RUN mkdir /var/run/sshd && \
    echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config

# Create shared directory
RUN mkdir -p /shared && chown developer:developer /shared

# Switch to developer user
USER developer
WORKDIR /home/developer

# Set up a nice bash prompt and aliases
RUN echo 'export PS1="\u@\h:\w\$ "' >> ~/.bashrc && \
    echo 'alias ll="ls -la"' >> ~/.bashrc && \
    echo 'alias la="ls -la"' >> ~/.bashrc && \
    echo 'alias l="ls -l"' >> ~/.bashrc && \
    echo 'alias ..="cd .."' >> ~/.bashrc && \
    echo 'alias ...="cd ../.."' >> ~/.bashrc && \
    echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> ~/.bashrc && \
    echo 'export GOPATH=$HOME/go' >> ~/.bashrc

# Keep container running
CMD ["/bin/bash"]
